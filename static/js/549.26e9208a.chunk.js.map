{"version":3,"file":"static/js/549.26e9208a.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactsItem/ContactsItem.module.css?8722","components/ContactsItem/ContactsItem .jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/PhoneBook/PhoneBook.module.css?b449","components/PhoneBook/PhoneBook.jsx","Pages/Contacts/Contacts.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"textForm\":\"ContactForm_textForm__jaDlc\",\"textInput\":\"ContactForm_textInput__pEvxj\",\"buttonForm\":\"ContactForm_buttonForm__RQPsC\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../Redux/operations';\nimport { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from './ContactForm.module.css';\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(state => state.contacts.items);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const getContact = name => {\n    return contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    if (getContact(name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact(newContact));\n    setName('');\n    setNumber('');\n  };\n  return (\n    <form className={css.contactForm} onSubmit={handleSubmit}>\n      <div>\n        <label className={css.textForm} htmlFor=\"\" name=\"name\">\n          Name\n        </label>\n        <input\n          className={css.textInput}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n          value={name}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"\" name=\"number\">\n          Number\n        </label>\n        <input\n          className={css.textInput}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n          value={number}\n        />\n        <button className={css.buttonForm} type=\"submit\">\n          Add contact\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsItem\":\"ContactsItem_contactsItem__MmqyM\",\"buttonFilter\":\"ContactsItem_buttonFilter__-y73q\"};","import css from './ContactsItem.module.css';\n\nconst ContactsItem = ({ contact, onDeleteContact }) => (\n<li className={css.contactsItem}>\n    {contact.name} : {contact.number}\n    <button\n      className={css.buttonFilter}\n      type=\"button\"\n      onClick={() => onDeleteContact(contact.id)}\n    >\n      Dalete\n    </button>\n  </li>\n);\n\n\nexport default ContactsItem ;","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\"};","import { useSelector, useDispatch } from 'react-redux';\nimport ContactsItem from '../../components/ContactsItem/ContactsItem ';\nimport css from './ContactList.module.css';\nimport { deleteContact } from '../../Redux/operations';\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => {\n    return state.contacts.items.filter(contact =>\n      contact.name.toLowerCase().includes(state.filter.trim().toLowerCase())\n    );\n  });\n\n  const deleteConts = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ul className={css.contactList}>\n      {contacts.map(contact => (\n        <ContactsItem \n          key={contact.id}\n          contact={contact}\n          onDeleteContact={deleteConts }\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"filter\":\"Filter_filter__vxThR\"};","import css from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../Redux/filterSlice';\n\nconst Filter = () => {\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <div className={css.filter}>\n      <label className={css.label} htmlFor=\"filterInput\">\n        Filter contacts by name:{' '}\n      </label>\n      <input\n        type=\"text\"\n        id=\"filterInput\"\n        name=\"filter\"\n        value={filter}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"phonebook\":\"PhoneBook_phonebook__VE+ya\",\"phonebookTitle\":\"PhoneBook_phonebookTitle__B5hmk\"};","import ContactForm from '../../components/ContactForm/ContactForm';\nimport ContactList from '../../components/ContactList/ContactList';\nimport Filter from '../../components/Filter/Filter';\nimport css from './PhoneBook.module.css';\nconst Phonebook = () => {\n  return (\n    <>\n      <div className={css.phonebook}>\n        <ContactForm />\n        <Filter />\n        <h2 className={css.phonebookTitle}>Contacts:</h2>\n        <ContactList />\n      </div>\n    </>\n  );\n};\n\nexport default Phonebook;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport Phonebook from '../../components/PhoneBook/PhoneBook';\nimport { fetchContacts } from 'Redux/operations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(state => state.contacts.isLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <div>{isLoading && 'Loading...'}</div>\n      <Phonebook />\n    </>\n  );\n};\n\nexport default Contacts;"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","useState","name","setName","number","setNumber","contacts","useSelector","state","items","dispatch","useDispatch","handleChange","e","target","value","className","css","onSubmit","preventDefault","newContact","some","contact","toLowerCase","getContact","addContact","alert","htmlFor","type","pattern","title","required","onChange","onDeleteContact","onClick","filter","includes","trim","deleteConts","deleteContact","map","setFilter","isLoading","useEffect","fetchContacts","Helmet"],"sourceRoot":""}